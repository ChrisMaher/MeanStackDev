"use strict";var ApplicationConfiguration=function(){var applicationModuleName="starterapp",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("customers"),ApplicationConfiguration.registerModule("deals"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("deals").controller("DealsController",["$scope","$stateParams","$location","Authentication","Deals",function($scope,$stateParams,$location,Authentication,Deals){$scope.authentication=Authentication,this.create=function(){var deal=new Deals({title:this.title,details:this.details,retailer:this.retailer,price:this.price,image:this.image,urlimage:this.urlimage,tags:this.tags,startdate:this.startdate,enddate:this.enddate});deal.$save(function(response){$location.path("deals/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(deal){if(deal){deal.$remove();for(var i in $scope.deals)$scope.deals[i]===deal&&$scope.deals.splice(i,1)}else $scope.deal.$remove(function(){$location.path("deals")})},$scope.update=function(){var deal=$scope.deal;deal.$update(function(){$location.path("deals/"+deal._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.deals=Deals.query()},$scope.findOne=function(){$scope.deal=Deals.get({dealId:$stateParams.dealId})}}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication,$scope.alerts=[{icon:"glyphicon-euro",colour:"btn-success",total:"12",description:"New Deals in 24h"},{icon:"glyphicon-euro",colour:"btn-success",total:"20",description:"Total Deals"},{icon:"glyphicon-user",colour:"btn-default",total:"56",description:"New Members in 24h"},{icon:"glyphicon-user",colour:"btn-default",total:"958",description:"Total Members"},{icon:"glyphicon-comment",colour:"btn-warning",total:"98",description:"New Comments in 24h"},{icon:"glyphicon-comment",colour:"btn-warning",total:"1,254",description:"Total Comments"}]}]),angular.module("core").controller("DealsController",["$scope","$stateParams","$location","Authentication","Deals",function($scope,$stateParams,$location,Authentication,Deals){$scope.authentication=Authentication,$scope.dealsCount=Deals.length(),$scope.create=function(){var deal=new Deals({name:this.name});deal.$save(function(response){$location.path("deals/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(deal){if(deal){deal.$remove();for(var i in $scope.deals)$scope.deals[i]===deal&&$scope.deals.splice(i,1)}else $scope.deal.$remove(function(){$location.path("deals")})},$scope.update=function(){var deal=$scope.deal;deal.$update(function(){$location.path("deals/"+deal._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.deals=Deals.query()},$scope.findOne=function(){$scope.deal=Deals.get({dealId:$stateParams.dealId})},$scope.fillStats=function(){$scope.deal=Deals.get({dealId:$stateParams.dealId})}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("customers").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Customers","customers","dropdown","/customers(/create)?"),Menus.addSubMenuItem("topbar","customers","List Customers","customers"),Menus.addSubMenuItem("topbar","customers","New Customer","customers/create")}]),angular.module("customers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCustomers",{url:"/customers",templateUrl:"modules/customers/views/list-customers.client.view.html"})}]);var customerApp=angular.module("customers");customerApp.controller("CustomersController",["$scope","$stateParams","Authentication","Customers","$modal","$log",function($scope,$stateParams,Authentication,Customers,$modal,$log){this.authentication=Authentication,this.customers=Customers.query(),this.modalCreate=function(size){var modalInstance=$modal.open({templateUrl:"modules/customers/views/create-customer.client.view.html",controller:["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close($scope.customer)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size});modalInstance.result.then(function(selectedItem){},function(){$log.info("Modal dismissed at: "+new Date)})},this.modalUpdate=function(size,selectedCustomer){var modalInstance=$modal.open({templateUrl:"modules/customers/views/edit-customer.client.view.html",controller:["$scope","$modalInstance","customer",function($scope,$modalInstance,customer){$scope.customer=customer,$scope.ok=function(){$modalInstance.close($scope.customer)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{customer:function(){return selectedCustomer}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},this.remove=function(customer){if(customer){customer.$remove();for(var i in this.customers)this.customers[i]===customer&&this.customers.splice(i,1)}else $scope.customer.$remove(function(){})}}]),customerApp.controller("CustomersCreateController",["$scope","Customers",function($scope,Customers){this.create=function(){var customer=new Customers({firstName:this.firstName,surname:this.surname,country:this.country,industry:this.industry,email:this.email,phone:this.phone,referred:this.referred,channel:this.channel});customer.$save(function(response){$scope.firstName="",$scope.surname="",$scope.country="",$scope.industry="",$scope.email="",$scope.phone="",$scope.referred="",$scope.channel=""},function(errorResponse){$scope.error=errorResponse.data.message})}}]),customerApp.controller("CustomersUpdateController",["$scope","Customers",function($scope,Customers){$scope.channelOptions=[{id:"1",item:"Facebook"},{id:"2",item:"Twitter"},{id:"3",item:"Email"}],this.update=function(updatedCustomer){var customer=updatedCustomer;customer.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})}}]),customerApp.directive("customerList",[function(){return{restrict:"E",transclude:!0,templateUrl:"modules/customers/views/customer-list-template.html",link:function(scope,element,attrs){}}}]),angular.module("customers").factory("Customers",["$resource",function($resource){return $resource("customers/:customerId",{customerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("deals").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Deals","deals","dropdown","/deals(/create)?"),Menus.addSubMenuItem("topbar","deals","List Deals","deals"),Menus.addSubMenuItem("topbar","deals","New Deal","deals/create")}]),angular.module("deals").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDeals",{url:"/deals",templateUrl:"modules/deals/views/list-deals.client.view.html"}).state("createDeal",{url:"/deals/create",templateUrl:"modules/deals/views/create-deal.client.view.html"}).state("viewDeal",{url:"/deals/:dealId",templateUrl:"modules/deals/views/view-deal.client.view.html"}).state("editDeal",{url:"/deals/:dealId/edit",templateUrl:"modules/deals/views/edit-deal.client.view.html"})}]),angular.module("deals").controller("DealsController",["$scope","$stateParams","$location","Authentication","Deals",function($scope,$stateParams,$location,Authentication,Deals){$scope.authentication=Authentication,this.create=function(){var deal=new Deals({title:this.title,details:this.details,retailer:this.retailer,price:this.price,image:this.image,link:this.link,urlimage:this.urlimage,tags:this.tags,startdate:this.startdate,enddate:this.enddate});deal.$save(function(response){$location.path("deals/"+response._id),$scope.title="",$scope.details="",$scope.retailer="",$scope.price="",$scope.image="",$scope.link="",$scope.urlimage="",$scope.tags="",$scope.startdate="",$scope.enddate=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(deal){if(deal){deal.$remove();for(var i in $scope.deals)$scope.deals[i]===deal&&$scope.deals.splice(i,1)}else $scope.deal.$remove(function(){$location.path("deals")})},$scope.update=function(){var deal=$scope.deal;deal.$update(function(){$location.path("deals/"+deal._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.deals=Deals.query()},$scope.findOne=function(){$scope.deal=Deals.get({dealId:$stateParams.dealId})}}]),angular.module("deals").factory("Deals",["$resource",function($resource){return $resource("deals/:dealId",{dealId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);